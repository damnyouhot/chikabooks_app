// lib/pages/growth/emotion_record_page.dart (ÏßÑÎã®Ïö© ÏΩîÎìú)
import 'package:flutter/material.dart';
import '../../services/emotion_service.dart';
import 'dart:developer' as developer;

class EmotionRecordPage extends StatefulWidget {
  const EmotionRecordPage({super.key});

  @override
  State<EmotionRecordPage> createState() => _EmotionRecordPageState();
}

class _EmotionRecordPageState extends State<EmotionRecordPage> {
  int _score = 3;
  bool _loading = false;

  Future<void> _submit() async {
    developer.log('--- Í∞êÏ†ï Í∏∞Î°ù ÏãúÏûë ---', name: 'EmotionDebug');
    setState(() => _loading = true);

    try {
      developer.log('1. Ïò§Îäò Í∏∞Î°ù Í∞ÄÎä•ÌïúÏßÄ ÌôïÏù∏ ÏãúÏûë...', name: 'EmotionDebug');
      final canRecord = await EmotionService.canRecordToday();
      developer.log('2. Ïò§Îäò Í∏∞Î°ù Í∞ÄÎä• Ïó¨Î∂Ä: $canRecord', name: 'EmotionDebug');

      if (!canRecord) {
        if (mounted) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(const SnackBar(content: Text('Ïò§ÎäòÏùÄ Ïù¥ÎØ∏ Í∞êÏ†ïÏùÑ Í∏∞Î°ùÌñàÏñ¥Ïöî!')));
          Navigator.pop(context, false);
        }
        developer.log('--- Ïù¥ÎØ∏ Í∏∞Î°ùÌïòÏó¨ ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å ---', name: 'EmotionDebug');
        return;
      }

      developer.log(
        '3. FirestoreÏóê Í∞êÏ†ï Í∏∞Î°ù ÏãúÏûë (Ï†êÏàò: $_score)...',
        name: 'EmotionDebug',
      );
      await EmotionService.recordEmotion(_score);
      developer.log('4. FirestoreÏóê Í∞êÏ†ï Í∏∞Î°ù ÏÑ±Í≥µ!', name: 'EmotionDebug');

      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('Ïò§ÎäòÏùò Í∞êÏ†ïÏù¥ Í∏∞Î°ùÎêòÏóàÏäµÎãàÎã§ üôÇ')));
        Navigator.pop(context, true);
      }
      developer.log('--- Î™®Îì† ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÏÉÅ Ï¢ÖÎ£å ---', name: 'EmotionDebug');
    } catch (e, s) {
      developer.log(
        '!!! Í∞êÏ†ï Í∏∞Î°ù Ï§ë ÏπòÎ™ÖÏ†ÅÏù∏ Ïò§Î•ò Î∞úÏÉù !!!',
        name: 'EmotionDebug',
        error: e,
        stackTrace: s,
      );
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Ïò§Î•ò Î∞úÏÉù: $e')));
      }
    } finally {
      if (mounted) {
        setState(() => _loading = false);
      }
      developer.log('--- finally Î∏îÎ°ù Ïã§Ìñâ ---', name: 'EmotionDebug');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Ïò§ÎäòÏùò Í∞êÏ†ï Í∏∞Î°ù')),
      body: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const Text(
              'Ïò§Îäò Í∏∞Î∂ÑÏùÄ Î™á Ï†êÏù∏Í∞ÄÏöî?',
              style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            Text(
              '$_scoreÏ†ê',
              style: TextStyle(
                fontSize: 48,
                fontWeight: FontWeight.bold,
                color: Theme.of(context).primaryColor,
              ),
            ),
            const SizedBox(height: 24),
            Slider(
              value: _score.toDouble(),
              min: 1,
              max: 5,
              divisions: 4,
              label: '$_scoreÏ†ê',
              onChanged: (value) {
                setState(() => _score = value.round());
              },
            ),
            const SizedBox(height: 48),
            SizedBox(
              width: double.infinity,
              height: 50,
              child: ElevatedButton(
                onPressed: _loading ? null : _submit,
                child:
                    _loading
                        ? const CircularProgressIndicator(color: Colors.white)
                        : const Text('Í∏∞Î°ùÌïòÍ∏∞', style: TextStyle(fontSize: 18)),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
